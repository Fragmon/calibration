# Erstellt von Frix_x#0161
# ueberarbeitet und uebersetzt von Fragmon#2722 

# 14.11.2022 fix the flow error (entered parameters were not taken over) 
#            parameters used are now displayed in the command line
# 12.11.2022 fix in line 213
# 10.11.2022 change _USER_VARIABLES to_USER_VARIABLES_CALIBRATE (doubled macro if you use klicky) 
#            add TEMP Values in FLOW and PA macro
# 09.11.2022 include _Calibrate_End

########################################################
################Informationen###########################
########################################################

################### Aufbau #############################
# [gcode_macro _USER_VARIABLES_CALIBRATE] = Parameter fuer die Kalibrierungstools
# [gcode_macro _CALIBRATE_START] = Integrationsmoeglichkeit des eigenen Start Macros
# [gcode_macro KALIBRIEREN] = Makro zum Starten der Tests
# [gcode_macro PRESSURE_ADVANCE_CALIBRATION] = PA Test
# [gcode_macro FLOW_MULTIPLIER_CALIBRATION] = Flow Test

######### Informationen zum Makro "Kalibrieren" #########
# Im ersten Feld kann die Testart eingetragen werden --> "FLOW" startet den Flow Test --> "PA" startet den PA Test
# Die beiden weiteren Felder sind zur Einstellung der Bed- und Hotendtemperatur noetig. 

######### Informationen zu "_USER_VARIABLES_CALIBRATE" ############
## Verfuegbare generelle Eingabeparameter:
# variable_print_default_bed_temp: 110           # Bedtemperatur
# variable_print_default_extruder_temp: 240      # Hotendtemperatur
# variable_print_default_feedrate_raft:30        # Vorschubgeschwindigkeit (in mm/s) fuer den Druck des Rafts
# variable_print_default_initial_purge:1         # Menge an Filament, die vor dem Drucken der Grundlinie zum Druckstart gedrueckt wird (kann auf 0 gesetzt werden, um die Funktion zu deaktivieren)
# variable_print_default_retract_length:3.5      # Rueckzugslaenge in mm (verwenden Sie Ihren eigenen Rueckzugswert fuer das Filament)

## Verfuegbare Eingabeparameter fuer FLOW_MULTIPLIER_CALIBRATION:
# variable_print_default_do_raft:1               # druckt eine "Basis" zur Unterstuetzung der Schale (bessere Bettadhaesion und leichtere Entfernung am Ende)
# variable_print_default_do_retract:1            # aktiviert/deaktiviert den Rueckzug. Standardmaessig deaktiviert, um einen konstanten Fluss zu gewaehrleisten, kann aber aktiviert werden, falls es Probleme beim Druck gibt.
# variable_print_default_print_size:40           # Groesse in mm, die fuer den Test auf dem Bett verwendet wird. Das Modell wird in der Mitte des Bettes gedruckt.
# variable_print_default_print_height:15         # Hoehe der gedruckten Schale in mm
# variable_print_default_corner_radius:8         # externer Radius, der in den Ecken der Schale verwendet wird, um die Geschwindigkeit zu glaetten und eine konstante Stroemung ueber den Druck zu gewaehrleisten
# variable_print_default_number_of_perimeters:2  # Anzahl der Perimeter, die fuer den Druck der Schale verwendet werden. Wenn 1 Perimeter verwendet wird, ist es zwingend erforderlich, ein Mikrometer zum Messen zu verwenden: am besten ist es, >=2 zu verwenden.
# variable_print_default_fan_speed:20            # Prozentsatz des Luefters, der fuer den Druck verwendet werden soll (wird nach dem Rafting angewendet)
# variable_print_default_e_multiplier:1.00       # Extrusionsmultiplikator, der auf den Druck angewendet werden soll (verwenden Sie etwas, das dem realen Wert nahe kommt)
# variable_print_default_filament_diameter:1.75  # Durchmesser des aktuell in der Maschine geladenen Filaments
# variable_print_default_extrusion_width:0.4     # Breite einer Extrusionslinie (wird als Ziel verwendet). Die Verwendung von 0.4 fuer eine Duese mit einem Durchmesser von 0.4 mm ist ein sicherer Wert.
# variable_print_default_layer_height:0.2        # Schichthoehe des Drucks. Vermeiden Sie zu kleine Schichthoehen und versuchen Sie, nahe bei 0,5 * Duesendurchmesser zu sein.
# variable_print_default_feedrate_print:10       # Vorschubgeschwindigkeit (in mm/s) fuer den Druck der Schale
# variable_print_default_feedrate_travel:200     # Vorschubgeschwindigkeit (in mm/s) fuer schnelle Fahrbewegungen
# variable_print_default_feedrate_z:20           # Vorschubgeschwindigkeit (in mm/s) fuer Z-Lift-Bewegungen (grundsaetzlich Z-Hop und Z-Ausrichtung)
# variable_print_default_feedrate_retract:50     # Vorschubgeschwindigkeit (in mm/s) fuer Rueckzugs- und Rueckholbewegungen des Filaments

## Verfuegbare Eingabeparameter fuer PRESSURE_ADVANCE_CALIBRATION:
# variable_print_default_do_raft_pa:1               # druckt eine "Basis" zur Unterstuetzung der Schale (bessere Bettadhaesion und leichtere Entfernung am Ende)
# variable_print_default_pa_start:0             # PA-Wert zum Starten
# variable_print_default_pa_increment:0.05      # PA-Wert, der fuer jedes nachfolgende Band erhoeht werden soll
# variable_print_default_e_multiplier:1.25      # (1.25 bei aktiviertem Raft, 1.5 bei deaktiviertem Raft) Extrusionsmultiplikator, der auf Drucklinien im Band anzuwenden ist
# variable_print_default_print_size_PA:150      # maximale Breite/Hoehe in mm, die der Test nutzen kann. Das Modell wird in der Mitte des Bettes gedruckt.
# variable_print_default_num_bands:20           # optional kann die Anzahl der Baender auf diese Weise begrenzt werden. Ansonsten werden so viele Baender gedruckt, wie in die angegebene Groesse passen
# variable_print_default_feedrate_control:30    # Geschwindigkeit, mit der die Kontrolllinien in einem Band gedruckt werden, mm/sec
# variable_print_default_feedrate_outer:5       # Geschwindigkeit, mit der die aeusseren Teile der Testlinien in einem Band gedruckt werden, mm/sec
# variable_print_default_feedrate_inner:160     # Geschwindigkeit des Drucks des mittleren Teils der Testlinien in einem Band, mm/sec
# variable_print_default_feedrate_raft:30       # Geschwindigkeit fuer den Druck des Flosses, falls aktiviert, mm/sec
# variable_print_default_lines_per_band:4       # Anzahl der Linien pro Band. Die Haelfte davon sind Kontrolllinien, die andere Haelfte sind Testlinien.  
# variable_print_default_spacing_line:0.4       # Abstand zwischen den einzelnen Linien in einem Band


######### Informationen zum Makro "FLOW_MULTIPLIER_CALIBRATION" #########
### Was ist das? ###
# Der Hauptgrund fuer diese Makros ist es, eine filament- und slicerunabhaengige Moeglichkeit zu schaffen, den Fliessextrusionsmultiplikator zu kalibrieren.
### Verwendung ###
# Drucke die Huelle
# Messen Sie die Schalendicke mit einer Schieblehre (oder besser mit einem Mikrometer) und rufen Sie dann das Berechnungsmakro auf:
# COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx
# Trage statt dem xxx.xxx den gemessenen Wert ein
# -> Der neu berechnete Durchfluss wird in der Konsole ausgegeben. Dieser kann danach im bevorzugten Slicer eingefuegt.

######### Informationen zum Makro "PRESSURE_ADVANCE_CALIBRATION" #########
# Der Hauptgrund fuer diesen Test ist, dass der Standard-Stimmturm mehrdeutige, interpretationsfaehige Messwerte mit einer grossen Fehlerspanne liefert.
# Dieser Test liefert Kontrollwerte neben den zu pruefenden Werten, so dass Unterschiede auf den ersten Blick leichter zu erkennen sind.
# Die ersten Zeilen werden langsam gedruckt und als Basislinie/Kontrolle verwendet, die anderen  Zeilen werden in zwei verschiedenen Geschwindigkeiten gedruckt.
# Der Druckvorschubwert wird fuer jedes Band erhoeht, beginnend bei 0,01 mit 0,002 Schritten.
# ueberpruefen Sie das gedruckte Modell, indem Sie auf die obere und untere Linie in jedem Band schauen, auf der rechten Seite der beiden vertikalen Raft-Balken (wo sich die Druckgeschwindigkeiten aendern).
# Suchen Sie das hoechste Band von unten, bei dem die oberen Linien noch den unteren Linien aehneln, ohne sichtbare Unregelmaessigkeiten in der Extrusionsbreite.
# Dann wird der Druckvorschubwert wie folgt berechnet:
# PA = START + (ANSTIEG * band_nummer)
# Bei der Verwendung von Standardwerten waere das wie folgt:
# PA = 0.00 + (0.05 * band_number)
# Sie koennen den Test auch mit einem START-Wert wiederholen, der etwas unter dem berechneten PA-Wert liegt, und mit kleineren INCREMENTs.
# um Ihren PA-Wert weiter einzugrenzen und zu verfeinern.


##################################################################################################
#################################Makros###########################################################
##################################################################################################

[gcode_macro _USER_VARIABLES_CALIBRATE]
variable_verbose: True
####General Settings########
variable_print_default_bed_temp: 65                       # bed temp while calibration
variable_print_default_extruder_temp: 210                 # extruder temp while calibration
variable_print_default_retract_length:2                   # how much to retract when traveling between print moves
variable_print_default_feedrate_raft:30                   # print feedrate for printing raft
variable_print_default_initial_purge:1                    # mm of filament to purge before printing. set to 0 to disable

####Flow Settings#####
variable_print_default_do_raft:1                          # whether to print a raft or not
variable_print_default_do_retract:0                       # whether to enable retract/unrectract on travel moves
variable_print_default_print_size:40                      # size of the printed object on the build plate
variable_print_default_print_height:15                    # height of the printed object
variable_print_default_corner_radius:8                    # radius of the corners to smooth the shell and toolpath
variable_print_default_number_of_perimeters:2             # number of perimeters to print the shell
variable_print_default_fan_speed:20                       # part cooling fan speed in percent (0-100)
variable_print_default_e_multiplier:1.00                  # extrusion multiplier for the shell
variable_print_default_filament_diameter:1.75             # filament diameter
variable_print_default_extrusion_width:0.4                # extrusion width goal for one line
variable_print_default_layer_height:0.2                   # layer height for the print
variable_print_default_feedrate_print:100                 # print feedrate
variable_print_default_feedrate_travel:200                # travel feedrate between print moves
variable_print_default_feedrate_z:20                      # z axis travel feedrate
variable_print_default_feedrate_retract:40                # retract and deretract feedrate

####PA Settings
variable_print_default_do_raft_pa:1                       # whether to enable retract/unrectract on travel moves
variable_print_default_pa_start:0                         # starting PA value
variable_print_default_pa_increment:0.05                  # how much to increment PA per band
variable_print_default_print_size_pa:150                  # width/height of the printed test
variable_print_default_num_bands:20                       # limit the number of bands to print. othwerwise print as many as would fit within a given size
variable_print_default_lines_per_band:4                   # number of lines per band. half are control, another half the test
variable_print_default_e_multiplier_pa:1.25               # extrusion multiplier for line print moves // ohne raft 1.00
variable_print_default_feedrate_outer:5                   # print feedrate of the lines on the sides of the band --> slowest print speed
variable_print_default_feedrate_control:30                # print feedrate of the control-line  
variable_print_default_feedrate_inner:160                 # print feedrate of the line in the middle of the band --> fastest print speed
variable_print_default_feedrate_travel:200                # travel feedrate between print moves                         
variable_print_default_spacing_line:0.4                   # distance between lines in a band
# Do not remove the next line
gcode:

##################################
###########STARTMAKRO#############
##################################

[gcode_macro _CALIBRATE_START]                            
gcode:

    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}

   	M190 S{BED_TEMP}                         ; Bed heat up
    G28                                      ; Home
    Z_TILT_ADJUST				              ; Z-Tilt
    G28 Z					                  ; Home Z after Z-Tilt
    M109 S{EXTRUDER_TEMP}                     ; Extruder heat up and wait
    M83                                      ; Extruder relative mode
    G1 X0 Y0 F2200				              ; Go to front
    G92 E0.0                                 ; Reset extruder length
    G90                                      ; Absolute positioning
    PRIME_LINE                               ; First move 
##################################
#############ENDMAKRO#############
##################################

[gcode_macro _CALIBRATE_END]                            
gcode:

    #TURN_OFF_HEATERS                         ; Turn off bed and nozzle
    G91                                      ; Relative positioning
    G1 E-1 F3000                             ; Retract
    G1 X-0.5 Y-0.5 Z5 E-5                    ; Move a bit and retract filament even more
    G90                                      ; Absolute positioning
    G1 X0 Y150 F2200                         ; Move bed to front
    M107                                     ; Turn off part fan
    #M84                                      ; Steppers off
    G90                                      ; Absolute positioning                       
    
################################
######GRUNDKONFIGURATION########
################################

[gcode_macro KALIBRIEREN]
description: Calibrate the printer flow or pressure advance
gcode:
    {% set TYPE = params.TYPE|default("-PA-or-FLOW-")|string|lower %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}

    {% if TYPE=="flow" %}
        FLOW_MULTIPLIER_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
        END_PRINT

    {% elif TYPE=="pa" %}
        PRESSURE_ADVANCE_CALIBRATION EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
        END_PRINT

    {% else %}
        {action_respond_info("Das Makro kann nur mit folgenden Eingaben gestartet werden: TYPE= \"flow\" or \"pa\"")}
        {action_raise_error("Nicht genug Parameter, um eine Kalibrierung zu starten!")}
    
    {% endif %}

################################
########PRESSURE ADVANCE########
################################

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description: Calibrate the pressure advance by printing a grid pattern
gcode:

    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
    {% set pa_start        = params.STARTWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_start)|float %}       # starting PA value
    {% set pa_increment    = params.ANHEBUNG|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_pa_increment)|float %}  # how much to increment PA per band
    {% set do_raft         = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft_pa)|int %}  # whether to print a raft or not
    {% set print_size      = params.BAURAUMBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size_pa)|int %}                # width/height of the printed test
    {% set num_bands       = params.ANZAHL_TESTS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_num_bands)|int %}               # limit the number of bands to print. othwerwise print as many as would fit within a given size
    {% set lines_per_band  = params.LINIEN_PRO_TEST|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_lines_per_band)|int %}              # number of lines per band. half are control, another half the test
    {% set e_multiplier    = params.EXTRUSIONS_FAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier_pa)|float %},  # extrusion multiplier for line print moves
    {% set retract_length  = params.RETRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %}          # how much to retract when traveling between print moves
    {% set initial_purge   = params.PURGE_MM|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %}                    # mm of filament to purge before printing. set to 0 to disable // deaktiviert aufgrund Prime_Line Makro
    {% set feedrate_control = params.SPEED_KONTROLLSTREIFEN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_control)|int * 60 %}  # print feedrate of the line in the middle of the band
    {% set feedrate_outer   = params.SPEED_BEGINN|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_outer)|int * 60 %}    # print feedrate of the lines on the sides of the band
    {% set feedrate_inner   = params.SPEED_MITTE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_inner)|int * 60 %}   # print feedrate of the line in the middle of the band
    {% set feedrate_travel  = params.SPEED_TRAVEL|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %}  # travel feedrate between print moves
    {% set feedrate_raft    = params.SPEED_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %}    # print feedrate for printing raft
    {% set spacing_line  = params.LINIEN_ABSTAND|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_spacing_line)|float %}  # distance between lines in a band
    {% set feedrate_z       = 5 * 60 %}   # z axis travel feedrate
    {% set feedrate_retract = 50 * 60 %}  # retract and deretract feedrate

########DO NOT EDIT BEYOND THIS LINE################
    {% set spacing_band  = 2 %}                                       # distance between individual bands
    {% set spacing_raft  = 2 %}                                       # distance between raft lines
    {% set fast_line_ratio_percent = 50 %}
    # sanity check
    {% set lines_per_band    = [2, lines_per_band]|max %}
    {% set e_multiplier      = [1, e_multiplier]|max %}
    {% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
    {% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
    {% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}  # the higher the extrusion multiplier the wider the spacing
    # computed values
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set line_width    = nozzle_diameter * 1.25 %}
    {% set line_height   = nozzle_diameter / 2 %}
    {% set z_hop_height  = 2 * line_height %}
    {% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %} 
    {% set spacing_purge = line_height * 0.8 %}  # distance between purge lines and raft
    # set print width to align with the raft grid
    {% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}  # align raft spacing to multiples of line width
    {% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
    {% set print_width    = num_raft_lines * spacing_raft %}
    # adjust print height to align with the band grid
    {% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
    {% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
    {% set num_bands        = [num_bands, bands_per_height]|min %}  
    {% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
    # adjust slow and fast line lengths to align with raft grid
    {% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}  # ends between raft lines
    {% set fast_line_length = print_width - slow_line_length * 2 %}
    {% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
    {% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
    # find start position
    {% set x_start = max_x / 2 - print_width  / 2 %}
    {% set y_start = max_y / 2 - print_height / 2 %}

    SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
    {% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
    SET_PRESSURE_ADVANCE ADVANCE={pa_start}  # start with a given PA

    _CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}

    {action_respond_info("")}
    {action_respond_info("Starte Pressure Advance calibration.")}
    {action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
    {action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
    {action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
    {action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
    {action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)} 
    {action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
    {action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
    {action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)} 
    {action_respond_info("Parameter: EXTRUSIONS_FAKTOR:%.4f" % e_multiplier)}
    {action_respond_info("Parameter: RETRACT:%.2f" % retract_length)} 
    {action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
    {action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
    {action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
    {action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))} 
    {action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
    {action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
    {action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
    {action_respond_info("")}
    {action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
    {action_respond_info("")}
    {action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
    {action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}
    {action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
    {action_respond_info("Anzahl Baender: %d" % num_bands)}
    {action_respond_info("")}
    {action_respond_info("Angenommen, die erste Bandnummer ist 0")}
    {action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
    {action_respond_info("")}
    {action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}

    # set extrude_factor to 1 
    #
    M221 S100
    #
    # purging before raft
    #
    M117 Priming
    G90  # absolute coords
    G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}  # move to start position
    G91  # relative positioning
    G1 E{initial_purge} F{5 * 60}  # extrude at ~12mm3/sec
    G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}  # move to next line
    G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    
    #
    # print the raft
    #
    {% if do_raft == 1 %}
      G0 F{feedrate_raft} # set print speed
      
      {% for curr_raft_line in range(1, num_raft_lines + 2) %} # rafts need to be on both sides
          # see if we need to print thick raft on slow/fast line boundary
          {% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
              G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
              G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
          {% endif %}
          
          G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm} # print the vertical raft line

          # move over to next column
          {% if not loop.last %}
            {% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
            G1 X{horizontal_move} E{horizontal_move * e_per_mm}  
          {% endif %}
      {% endfor %}

      G1 E-{retract_length} F{feedrate_retract}  # retract
      G0 Z{z_hop_height} F{feedrate_z}           # z-hop
    {% endif %}

    #
    # print the bands
    #
    M117 Printing bands
    G90  # absolute coords
    G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}  # move to XY start position
    G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}        # move to Z start position
    G91  # relative positioning
    G1 E{retract_length} F{feedrate_retract}  # unretract

    # print bands
    {% for curr_band_num in range(0, num_bands ) %}
      {% set outer_loop = loop %}

      {% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
      SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}  # set PA
      M117 Band {curr_band_num} PA {curr_pa_value|round(4)}

      # print control lines
      {% for _ in range(num_lines_control) %}
        G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control} # print line

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}  # move to start of next line

        G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
        G1 E{retract_length} F{feedrate_retract}  # unretract
      {% endfor %}

      # print test lines
      {% for _ in range(num_lines_test) %}
        {% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
          G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f} # print line
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        {% if not (outer_loop.last and loop.last) %}
          G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}  # move to start of next line
          G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
          G1 E{retract_length} F{feedrate_retract}  # unretract
        {% endif %}
      {% endfor %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}  # retract
    G0 Z20 F{feedrate_z}  # up
    G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}  # center back
    
    M117  # clear the LCD
    SET_PRESSURE_ADVANCE ADVANCE={pa_saved}  # restore original PA
    RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
    _CALIBRATE_END
################################
########FLOW CALIBRATION########
################################

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description: Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode:

############# input and tunables##############   
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_bed_temp)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extruder_temp)|float %}
    {% set do_raft = params.ERZEUGE_RAFT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_raft)|int %} # whether to print a raft or not
    {% set do_retract = params.AKTIVIERE_RERTRACT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_do_retract)|int %} # whether to enable retract/unrectract on travel moves
    {% set print_size = params.DRUCKGROESSE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_size)|int %} # size of the printed object on the build plate
    {% set print_height = params.DRUCKOBJEKTHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_print_height)|int %} # height of the printed object
    {% set corner_radius = params.ECKRADIUS|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_corner_radius)|int %} # radius of the corners to smooth the shell and toolpath
    {% set number_of_perimeters = params.ANZAHL_WAENDE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_number_of_perimeters)|int %} # number of perimeters to print the shell
    {% set fan_speed = params.LUEFTERGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_fan_speed)|int %} # part cooling fan speed in percent (0-100)
    {% set e_multiplier = params.EXTRUSIONSFAKTOR|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_e_multiplier)|float %} # extrusion multiplier for the shell
    {% set filament_diameter = params.FILAMENTDURCHMESSER|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_filament_diameter)|float %} # filament diameter
    {% set extrusion_width = params.EXTRUSIONSBREITE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_extrusion_width)|float %} # extrusion width goal for one line
    {% set layer_height = params.LAYERHOEHE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_layer_height)|float %} # layer height for the print
    {% set retract_length = params.RETRACT_LAENGE|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_retract_length)|float %} # how much to retract when traveling between print moves
    {% set initial_purge = params.PURGEWERT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_initial_purge)|int %} # mm of filament to purge before printing. set to 0 to disable
    {% set z_hop_height  = 2 * layer_height %}
    {% set feedrate_print = params.DRUCKGESCHWINDIGKEIT|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_print)|int * 60 %} # print feedrate
    {% set feedrate_travel = params.TRAVEL_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_travel)|int * 60 %} # travel feedrate between print moves
    {% set feedrate_raft = params.RAFT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_raft)|int * 60 %} # print feedrate for printing raft
    {% set feedrate_z = params.Z_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_z)|int * 60 %} # z axis travel feedrate
    {% set feedrate_retract = params.RETRACT_SPEED|default(printer["gcode_macro _USER_VARIABLES_CALIBRATE"].print_default_feedrate_retract)|int * 60 %} # retract and deretract feedrate



    #########DO NOT EDIT BEYOND THIS LINE################
    #
    # COMPUTED VALUES
    #
    {% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %} # computed E factor (similar to Slic3r/PrusaSlicer/SuperSlicer)
    {% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %} # line spacing during the print
    {% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %} # theoric shell thickness

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set x_start = max_x / 2 - print_size / 2 %}
    {% set y_start = max_y / 2 - print_size / 2 %}
    {% set x_end = x_start + print_size %}
    {% set y_end = y_start + print_size %}

    {% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
    {% set raft_size = num_raft_lines * spacing %}

    #
    # STARTING...
    #
    {action_respond_info("")}
    {action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
    {action_respond_info("")}
    {action_respond_info("Parameter: BED_TEMP:%.0f" % BED_TEMP)}
    {action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % EXTRUDER_TEMP)}
    {action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
    {action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
    {action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)} 
    {action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
    {action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
    {action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)} 
    {action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
    {action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)} 
    {action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
    {action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
    {action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)} 
    {action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
    {action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
    {action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
    {action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))} 
    {action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
    {action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}

    {action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
    {action_respond_info("")}
    {action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
    {action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
    {action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
    {action_respond_info("")}
    {action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
    {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
    
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}

    _CALIBRATE_START EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP}
    # purging before raft
    #
    G90
    M83
    G92 E0.0
    G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel} # move at the start position to do a purge line
    
    G91 # use relative coordinates for the prime line
    G1 E{initial_purge} F{5 * 60}
    G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2} # print prime line
    G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2} # move to next line
    G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2} # print second prime line

    G1 E-{retract_length} F{feedrate_retract} # retract
    G0 Z{z_hop_height} F{feedrate_z} # z-hop

    G90 # back to absolute coordinates
    G0 X{x_start} Y{y_start} F{feedrate_travel} # move to start position
    G1 Z{layer_height} F{feedrate_z} # move to print height
    G1 E{retract_length} F{feedrate_retract} # unretract

    # set extrude_factor
    M221 S{e_multiplier * 100}

    #
    # print the raft
    #
    {% if do_raft == 1 %}
        G91 # use relative coordinates for the raft
        {% for curr_raft_line in range(1, num_raft_lines + 2) %}
            # print a raft line with alternating direction
            G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}

            # spacing move
            {% if not loop.last %}
                G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
            {% endif %}
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract} # retract
        G0 Z{z_hop_height} F{feedrate_z} # z-hop
        G90 # back to absolute coordinates
    {% endif %}
    
    #
    # print the shell
    #
    G90
    M106 S{fan_speed * 255 / 100}

    # for each layer
    {% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
        G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel} # move to XY start position
        G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z} # move to Z start position

        # print one layer of the shell (in a for loop to do all the perimeters of one layer)
        {% for perim_num in range(number_of_perimeters) %}
            # compute values for the current perimeter (offset and radius)
            {% set perim_offset = perim_num * spacing %}
            {% set perim_radius = corner_radius - (perim_num * spacing) %}
            
            # start position of the current perimeter
            G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
            {% if do_retract == 1 %}
                G1 E{retract_length} F{feedrate_retract} # unretract
            {% endif %}

            # print the perimeter using the offset and radius computed
            G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}

            {% if do_retract == 1 %}
                G1 E-{retract_length} F{feedrate_retract} # retract
            {% endif %}
        {% endfor %}

        {% if do_retract == 1 %}
            G91
            G0 Z{z_hop_height} F{feedrate_z}
            G90 
        {% endif %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}
    G91
    G0 Z20 F{feedrate_travel}

    RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
    _CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description: Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode:
    {% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %} # extrusion multiplier used for the calibration print
    {% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %} # theorical shell thickness
    {% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %} # measured shell thickness on the calibration print

    # if there is no OLD_EXTRUSION_MULTIPLIER passed as param, get the one from the last print calib run
    {% if evalue == 0.0 %}
        {% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
        
        # then, if there is also no evalue saved from the last run, alert user
        {% if last_evalue == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_evalue = last_evalue %}
            {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
        {% endif %}
    {% else %}
        {% set final_evalue = evalue %}
        {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
    {% endif %}

    # similarly, if there is no THEORICAL_THICKNESS passed as param, get the one from the last print calib run
    {% if theorical_thickness == 0.0 %}
        {% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
        
        # then, if there is also no evalue saved from the last run, alert user
        {% if last_shell_thickness == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_theorical_thickness = last_shell_thickness %}
            {action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
        {% endif %}
    {% else %}
        {% set final_theorical_thickness = theorical_thickness %}
        {action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
    {% endif %}

    # use the measured thickness from the user to compute a new flow value
    {% if measured_thickness == 0.0 %}
        {action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
        {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
        {action_raise_error("not enough data to perform the computation of the new flow !")}
    {% else %}
        {% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
        {action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
        {action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
        {action_respond_info("")}
    {% endif %}

[gcode_arcs]
resolution: 0.1

# ================================================================================================================================================
# DO NOT MODIFY THOSE VARIABLES (they are used internaly by the flow calibration macro)
[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness: 0.0
variable_last_evalue: 0.0
gcode:
