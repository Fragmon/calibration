# Idee und Code von Frix_x#0161 und fbeauKmi
# ueberarbeitet und uebersetzt von Fragmon#2722 

# 10.01.2022 redesign beta 2.0
# 13.12.2022 redesign and add max flow
# 28.11.2022 switch position bed and extruder temp 
#            fix raft and e_multiplier for pa test (settings)
#            add rectract speed (PA test)
# 14.11.2022 fix the flow error (entered parameters were not taken over) 
#            parameters used are now displayed in the command line
# 12.11.2022 fix in line 213
# 10.11.2022 change _USER_VARIABLES to_USER_VARIABLES_CALIBRATE (doubled macro if you use klicky) 
#            add TEMP Values in FLOW and PA macro
# 09.11.2022 include _Calibrate_End


##################################
###########STARTMAKRO#############
##################################

[gcode_macro _CALIBRATE_START]                                                       
gcode:
   {% set extruder_temp = params.EXTRUDER_TEMP|float %}
   {% set bed_temp = params.BED_TEMP|float %}
   #                                                                  ;space for other params (bed max/min etc.)
   
   M112                                                               ;this command must be deleted. It protects the printer from starting without starting GCode
   START_PRINT EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp}      ;replace "START_PRINT" with you START Macro and replace the names of the variables with yours
   
##################################
#############ENDMAKRO#############
##################################

[gcode_macro _CALIBRATE_END]                            
gcode:

    #TURN_OFF_HEATERS                         ; Turn off bed and nozzle
    G91                                      ; Relative positioning
    G1 E-1 F3000                             ; Retract
    G1 X-0.5 Y-0.5 Z5 E-5                    ; Move a bit and retract filament even more
    G90                                      ; Absolute positioning
    G1 X0 Y150 F2200                         ; Move bed to front
    M107                                     ; Turn off part fan
    #M84                                      ; Steppers off
    G90                                      ; Absolute positioning                       
    
################################
######GRUNDKONFIGURATION########
################################   
    

################################
########PRESSURE ADVANCE########
################################

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description: Calibrate the pressure advance by printing a grid pattern
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(245)|float %}
    {% set bed_temp = params.BED_TEMP|default(110)|float %}
    {% set pa_start     = params.START|default(0.02)|float %}       # starting PA value
    {% set pa_increment = params.INCREMENT|default(0.005)|float %}  # how much to increment PA per band

    {% set do_raft = params.DO_RAFT|default(1)|int %}  # whether to print a raft or not
    
    {% set print_size      = params.PRINT_SIZE|default(120)|int %}                # width/height of the printed test
    {% set num_bands       = params.BANDS_LIMIT|default(999)|int %}               # limit the number of bands to print. othwerwise print as many as would fit within a given size
    {% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}              # number of lines per band. half are control, another half the test
    {% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},  # extrusion multiplier for line print moves
    {% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}          # how much to retract when traveling between print moves
    {% set initial_purge   = params.PURGE_MM|default(8)|int %}                    # mm of filament to purge before printing. set to 0 to disable

    {% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}  # print feedrate of the line in the middle of the band
    {% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}    # print feedrate of the lines on the sides of the band
    {% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}   # print feedrate of the line in the middle of the band
    {% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}  # travel feedrate between print moves
    {% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}    # print feedrate for printing raft
    {% set feedrate_z       = 5 * 60 %}   # z axis travel feedrate
    {% set feedrate_retract = 50 * 60 %}  # retract and deretract feedrate
    
    {% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}  # distance between lines in a band
    {% set spacing_band  = 2 %}                                       # distance between individual bands
    {% set spacing_raft  = 2 %}                                       # distance between raft lines
    
    {% set fast_line_ratio_percent = 50 %}
    # sanity check
    {% set lines_per_band    = [2, lines_per_band]|max %}
    {% set e_multiplier      = [1, e_multiplier]|max %}
    {% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
    {% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
    {% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}  # the higher the extrusion multiplier the wider the spacing
    # computed values
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set line_width    = nozzle_diameter * 1.25 %}
    {% set line_height   = nozzle_diameter / 2 %}
    {% set z_hop_height  = 2 * line_height %}
    {% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %} 
    {% set spacing_purge = line_height * 0.8 %}  # distance between purge lines and raft
    # set print width to align with the raft grid
    {% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}  # align raft spacing to multiples of line width
    {% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
    {% set print_width    = num_raft_lines * spacing_raft %}
    # adjust print height to align with the band grid
    {% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
    {% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
    {% set num_bands        = [num_bands, bands_per_height]|min %}  
    {% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
    # adjust slow and fast line lengths to align with raft grid
    {% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}  # ends between raft lines
    {% set fast_line_length = print_width - slow_line_length * 2 %}
    {% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
    {% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
    # find start position
    {% set x_start = max_x / 2 - print_width  / 2 %}
    {% set y_start = max_y / 2 - print_height / 2 %}
    SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
    {% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
    SET_PRESSURE_ADVANCE ADVANCE={pa_start}  # start with a given PA

    _CALIBRATE_START EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp} 

    {action_respond_info("")}
    {action_respond_info("Starte Pressure Advance calibration.")}
    {action_respond_info("Parameter: BED_TEMP:%.0f" % bed_temp)}
    {action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % extruder_temp)}
    {action_respond_info("Parameter: STARTWERT:%.4f" % pa_start)}
    {action_respond_info("Parameter: ANHEBUNG:%.4f" % pa_increment )}
    {action_respond_info("Parameter: ERZEUGE_RAFT:%.0f" % do_raft)} 
    {action_respond_info("Parameter: BAURAUMBREITE:%.0f" % print_size)}
    {action_respond_info("Parameter: ANZAHL_TESTS:%.0f" % num_bands)}
    {action_respond_info("Parameter: LINIEN_PRO_TEST:%.0f" % lines_per_band)} 
    {action_respond_info("Parameter: RETRACT:%.2f" % retract_length)} 
    {action_respond_info("Parameter: PURGE_MM:%.0f" % initial_purge)}
    {action_respond_info("Parameter: SPEED_KONTROLLSTREIFEN:%.0f" % (feedrate_control / 60))}
    {action_respond_info("Parameter: SPEED_BEGINN:%.0f" % (feedrate_outer / 60))}
    {action_respond_info("Parameter: SPEED_MITTE:%.0f" % (feedrate_inner / 60))} 
    {action_respond_info("Parameter: SPEED_TRAVEL:%.0f" % (feedrate_travel / 60))}
    {action_respond_info("Parameter: SPEED_RAFT:%.0f" % (feedrate_raft / 60))}
    {action_respond_info("Parameter: LINIEN_ABSTAND:%.2f" % spacing_line)}
    {action_respond_info("")}
    {action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die Taste \"Not-Aus\", sobald der Druck offensichtlich zu hohe PA-Werte aufweist.")}
    {action_respond_info("")}
    {action_respond_info("PA des ersten Bands: %.4f" % pa_start)}
    {action_respond_info("PA des letzten Bands: %.4f" % (num_bands * pa_increment))}
    {action_respond_info("PA Anhebung pro Band: %.4f" % pa_increment)}
    {action_respond_info("Anzahl Baender: %d" % num_bands)}
    {action_respond_info("")}
    {action_respond_info("Angenommen, die erste Bandnummer ist 0")}
    {action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
    {action_respond_info("")}
    {action_respond_info("Aktualisieren Sie den Abschnitt [extruder] config und setzen Sie \"pressure_advance\" auf den von Ihnen berechneten Wert.")}

    # set extrude_factor to 1 
    #
    M221 S100
    #
    # purging before raft
    #
    M117 Priming
    G90  # absolute coords
    G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}  # move to start position
    G91  # relative positioning
    G1 E{initial_purge} F{5 * 60}  # extrude at ~12mm3/sec
    G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}  # move to next line
    G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    
    #
    # print the raft
    #
    {% if do_raft == 1 %}
      G0 F{feedrate_raft} # set print speed
      
      {% for curr_raft_line in range(1, num_raft_lines + 2) %} # rafts need to be on both sides
          # see if we need to print thick raft on slow/fast line boundary
          {% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
              G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
              G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
          {% endif %}
          
          G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm} # print the vertical raft line

          # move over to next column
          {% if not loop.last %}
            {% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
            G1 X{horizontal_move} E{horizontal_move * e_per_mm}  
          {% endif %}
      {% endfor %}

      G1 E-{retract_length} F{feedrate_retract}  # retract
      G0 Z{z_hop_height} F{feedrate_z}           # z-hop
    {% endif %}

    #
    # print the bands
    #
    M117 Printing bands
    G90  # absolute coords
    G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}  # move to XY start position
    G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}        # move to Z start position
    G91  # relative positioning
    G1 E{retract_length} F{feedrate_retract}  # unretract

    # print bands
    {% for curr_band_num in range(0, num_bands ) %}
      {% set outer_loop = loop %}

      {% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
      SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}  # set PA
      M117 Band {curr_band_num} PA {curr_pa_value|round(4)}

      # print control lines
      {% for _ in range(num_lines_control) %}
        G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control} # print line

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}  # move to start of next line

        G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
        G1 E{retract_length} F{feedrate_retract}  # unretract
      {% endfor %}

      # print test lines
      {% for _ in range(num_lines_test) %}
        {% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
          G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f} # print line
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        {% if not (outer_loop.last and loop.last) %}
          G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}  # move to start of next line
          G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
          G1 E{retract_length} F{feedrate_retract}  # unretract
        {% endif %}
      {% endfor %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}  # retract
    G0 Z20 F{feedrate_z}  # up
    G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}  # center back
    
    M117  # clear the LCD
    SET_PRESSURE_ADVANCE ADVANCE={pa_saved}  # restore original PA
    RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
    _CALIBRATE_END

################################
########FLOW CALIBRATION########
################################

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description: Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode:

############# input and tunables##############   
    {% set extruder_temp = params.EXTRUDER_TEMP|default(245)|float %}
    {% set bed_temp = params.BED_TEMP|default(110)|float %}
    {% set do_raft = params.DO_RAFT|default(1)|int %} # whether to print a raft or not
    {% set do_retract = params.DO_RECTRACT|default(0)|int %} # whether to enable retract/unrectract on travel moves
    {% set print_size = params.PRINT_SIZE|default(40)|int %} # size of the printed object on the build plate
    {% set print_height = params.HEIGHT|default(15)|int %} # height of the printed object
    {% set corner_radius = params.CORNER_RADIUS|default(8)|int %} # radius of the corners to smooth the shell and toolpath
    {% set number_of_perimeters = params.PERIMETERS|default(2)|int %} # number of perimeters to print the shell
    {% set fan_speed = params.FAN_SPEED|default(20)|int %} # part cooling fan speed in percent (0-100)

    {% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %} # extrusion multiplier for the shell
    {% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %} # filament diameter
    {% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %} # extrusion width goal for one line
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %} # layer height for the print

    {% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %} # how much to retract when traveling between print moves
    {% set initial_purge = params.PURGE_MM|default(1)|int %} # mm of filament to purge before printing. set to 0 to disable
    {% set z_hop_height  = 2 * layer_height %}

    {% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %} # print feedrate
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between print moves
    {% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %} # print feedrate for printing raft
    {% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %} # z axis travel feedrate
    {% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %} # retract and deretract feedrate

    #
    # COMPUTED VALUES
    #
    {% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %} # computed E factor (similar to Slic3r/PrusaSlicer/SuperSlicer)
    {% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %} # line spacing during the print
    {% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %} # theoric shell thickness

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set x_start = max_x / 2 - print_size / 2 %}
    {% set y_start = max_y / 2 - print_size / 2 %}
    {% set x_end = x_start + print_size %}
    {% set y_end = y_start + print_size %}

    {% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
    {% set raft_size = num_raft_lines * spacing %}

    #
    # STARTING...
    #
    {action_respond_info("")}
    {action_respond_info("Kalibrierungsdruck fuer den Extrusionsfluss wird gestartet")}
    {action_respond_info("")}
    {action_respond_info("Parameter: BED_TEMP:%.0f" % bed_temp)}
    {action_respond_info("Parameter: EXTRUDER_TEMP:%.0f" % extruder_temp)}
    {action_respond_info("Parameter: Aktiviere_Retract:%.0f" % do_retract)}
    {action_respond_info("Parameter: Druckgroesse:%.0f" % print_size)}
    {action_respond_info("Parameter: Druckobjekthoehe:%.0f" % print_height)} 
    {action_respond_info("Parameter: Eckradius:%.0f" % corner_radius)}
    {action_respond_info("Parameter: Anzahl_Waende:%.0f" % number_of_perimeters)}
    {action_respond_info("Parameter: Lueftergeschwindigkeit:%.0f" % fan_speed)} 
    {action_respond_info("Parameter: Extrusionsfaktor:%.4f" % e_multiplier)}
    {action_respond_info("Parameter: Filamentdurchmesser:%.2f" % filament_diameter)} 
    {action_respond_info("Parameter: Extrusionsbreite:%.4f" % extrusion_width)}
    {action_respond_info("Parameter: Layerhoehe:%.2f" % layer_height)}
    {action_respond_info("Parameter: Retract_Laenge:%.0f" % retract_length)} 
    {action_respond_info("Parameter: Purgewert:%.0f" % initial_purge)}
    {action_respond_info("Parameter: Druckgeschwindigkeit:%.0f" % (feedrate_print / 60))}
    {action_respond_info("Parameter: Speed_Z:%.0f" % (feedrate_z / 60))}
    {action_respond_info("Parameter: Speed_Rectract:%.0f" % (feedrate_retract / 60))} 
    {action_respond_info("Parameter: Speed_Travel:%.0f" % (feedrate_travel / 60))}
    {action_respond_info("Parameter: Speed_Raft:%.0f" % (feedrate_raft / 60))}

    {action_respond_info("Dieser Vorgang kann mit normalen Mitteln nicht unterbrochen werden. Druecken Sie die -Not-Aus-Taste, um den Vorgang bei Bedarf zu stoppen.")}
    {action_respond_info("")}
    {action_respond_info("Verwendeter Extrusionsmultiplikator: %.4f" % e_multiplier)}
    {action_respond_info("Anzahl der zu druckenden Umfaenge: %d" % number_of_perimeters)}
    {action_respond_info("THEORETHISCHE SCHALENDICKE: %.4f" % shell_thickness)}
    {action_respond_info("")}
    {action_respond_info("Messen Sie die Schalendicke mit einer Schieblehre oder einem Mikrometer. Rufen Sie dann das Berechnungsmakro mit dem gemessenen Wert auf:")}
    {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
    
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}

    _CALIBRATE_START EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp} 
    # purging before raft
    #
    G90
    M83
    G92 E0.0
    G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel} # move at the start position to do a purge line
    
    G91 # use relative coordinates for the prime line
    G1 E{initial_purge} F{5 * 60}
    G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2} # print prime line
    G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2} # move to next line
    G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2} # print second prime line

    G1 E-{retract_length} F{feedrate_retract} # retract
    G0 Z{z_hop_height} F{feedrate_z} # z-hop

    G90 # back to absolute coordinates
    G0 X{x_start} Y{y_start} F{feedrate_travel} # move to start position
    G1 Z{layer_height} F{feedrate_z} # move to print height
    G1 E{retract_length} F{feedrate_retract} # unretract

    # set extrude_factor
    M221 S{e_multiplier * 100}

    #
    # print the raft
    #
    {% if do_raft == 1 %}
        G91 # use relative coordinates for the raft
        {% for curr_raft_line in range(1, num_raft_lines + 2) %}
            # print a raft line with alternating direction
            G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}

            # spacing move
            {% if not loop.last %}
                G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
            {% endif %}
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract} # retract
        G0 Z{z_hop_height} F{feedrate_z} # z-hop
        G90 # back to absolute coordinates
    {% endif %}
    
    #
    # print the shell
    #
    G90
    M106 S{fan_speed * 255 / 100}

    # for each layer
    {% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
        G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel} # move to XY start position
        G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z} # move to Z start position

        # print one layer of the shell (in a for loop to do all the perimeters of one layer)
        {% for perim_num in range(number_of_perimeters) %}
            # compute values for the current perimeter (offset and radius)
            {% set perim_offset = perim_num * spacing %}
            {% set perim_radius = corner_radius - (perim_num * spacing) %}
            
            # start position of the current perimeter
            G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
            {% if do_retract == 1 %}
                G1 E{retract_length} F{feedrate_retract} # unretract
            {% endif %}

            # print the perimeter using the offset and radius computed
            G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}

            {% if do_retract == 1 %}
                G1 E-{retract_length} F{feedrate_retract} # retract
            {% endif %}
        {% endfor %}

        {% if do_retract == 1 %}
            G91
            G0 Z{z_hop_height} F{feedrate_z}
            G90 
        {% endif %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}
    G91
    G0 Z20 F{feedrate_travel}

    RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
    _CALIBRATE_END

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description: Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode:
    {% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %} # extrusion multiplier used for the calibration print
    {% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %} # theorical shell thickness
    {% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %} # measured shell thickness on the calibration print

    # if there is no OLD_EXTRUSION_MULTIPLIER passed as param, get the one from the last print calib run
    {% if evalue == 0.0 %}
        {% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
        
        # then, if there is also no evalue saved from the last run, alert user
        {% if last_evalue == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_evalue = last_evalue %}
            {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
        {% endif %}
    {% else %}
        {% set final_evalue = evalue %}
        {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
    {% endif %}

    # similarly, if there is no THEORICAL_THICKNESS passed as param, get the one from the last print calib run
    {% if theorical_thickness == 0.0 %}
        {% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
        
        # then, if there is also no evalue saved from the last run, alert user
        {% if last_shell_thickness == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_theorical_thickness = last_shell_thickness %}
            {action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
        {% endif %}
    {% else %}
        {% set final_theorical_thickness = theorical_thickness %}
        {action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
    {% endif %}

    # use the measured thickness from the user to compute a new flow value
    {% if measured_thickness == 0.0 %}
        {action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
        {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
        {action_raise_error("not enough data to perform the computation of the new flow !")}
    {% else %}
        {% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
        {action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
        {action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
        {action_respond_info("")}
    {% endif %}

[gcode_arcs]
resolution: 0.1

# ================================================================================================================================================
# DO NOT MODIFY THOSE VARIABLES (they are used internaly by the flow calibration macro)
[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness: 0.0
variable_last_evalue: 0.0
gcode:


[gcode_macro AXES_SHAPER_CALIBRATION]
description: Run standard input shaper test for all axes
gcode:
    {% set verbose = params.VERBOSE|default(true) %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    TEST_RESONANCES AXIS=X
    M400
    TEST_RESONANCES AXIS=Y
    M400

    {% if verbose %}
        RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    {% endif %}
    RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro BELTS_SHAPER_CALIBRATION]
description: Run custom demi-axe test to analyze belts on CoreXY printers
gcode:
    {% set verbose = params.VERBOSE|default(true) %}
 
    TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
    M400
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
    M400

    {% if verbose %}
        RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    {% endif %}
    RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS
    
[gcode_macro VIBRATIONS_CALIBRATION]
gcode:
    #
    # PARAMETERS
    #
    {% set size = params.SIZE|default(60)|int %} # size of the area where the movements are done
    {% set direction = params.DIRECTION|default('XY') %} # can be set to either XY, AB, ABXY, A, B, X, Y, Z
    {% set z_height = params.Z_HEIGHT|default(20)|int %} # z height to put the toolhead before starting the movements
    {% set verbose = params.VERBOSE|default(true) %} # Wether to log the current speed in the console

    {% set min_speed = params.MIN_SPEED|default(20)|int * 60 %} # minimum feedrate for the movements
    {% set max_speed = params.MAX_SPEED|default(200)|int * 60 %} # maximum feedrate for the movements
    {% set speed_increment = params.SPEED_INCREMENT|default(2)|int * 60 %} # feedrate increment between each move
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between moves

    {% set accel_chip1 = params.ACCEL_CHIP1|default("adxl345") %} # ADXL chip name in the config
    {% set accel_chip2 = params.ACCEL_CHIP2|default("") %} # ADXL chip name in the config

    #
    # COMPUTED VALUES
    #
    {% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}

    {% set direction_factor = {
        'XY'  : {
            'start' : {'x': -0.5, 'y': -0.5 },
            'move_factors' : {
                '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
                '2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
                '3' : {'x': -0.5, 'y': -0.5, 'z': 0.0 }
                }
            },
        'AB' : {
            'start' : {'x': 0.0, 'y': 0.0 },
            'move_factors' : {
                '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
                '2' : {'x': 0.0, 'y': 0.0, 'z': 0.0 },
                '3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
                '4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
                '5' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
                }
            },
        'ABXY' : {
            'start' : {'x': -0.5, 'y': 0.5 },
            'move_factors' : {
                '0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
                '2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
                '3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
                '4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
                '5' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
                }
            },
        'B'  : {
            'start' : {'x': 0.5, 'y': 0.5 },
            'move_factors' : {
                '0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 }
                }
            },
        'A'  : {
            'start' : {'x': -0.5, 'y': 0.5 },
            'move_factors' : {
                '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
                }
            },
        'X'  : {
            'start' : {'x': -0.5, 'y': 0.0 },
            'move_factors' : {
                '0' : {'x': 0.5, 'y': 0.0, 'z': 0.0 },
                '1' : {'x': -0.5, 'y': 0.0, 'z': 0.0 }
                }
            },
        'Y'  : {
            'start' : {'x': 0.0, 'y': 0.5 },
            'move_factors' : {
                '0' : {'x': 0.0, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': 0.0, 'y': 0.5, 'z': 0.0 }
                }
            },
        'Z'  : {
            'start' : {'x': 0.0, 'y': 0.0 },
            'move_factors' : {
                '0' : {'x': 0.0, 'y': 0.0, 'z': 1.0 },
                '1' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
                }
            }
        }
    %}

    #
    # STARTING...
    #
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}

    {% if (size / (max_speed / 60)) < 0.25 %}
        { action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }
    {% endif %}

    {% if not (direction in direction_factor) %}
        { action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y or Z is allowed!") }
    {% endif %}

    {action_respond_info("")}
    {action_respond_info("Starting speed and vibration calibration")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}
   
    SAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION

    G90

    # Going to the start position
    G1 Z{z_height}
    G1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}

    # vibration pattern for each frequency
    {% for curr_speed in range(min_speed, max_speed + speed_increment) %}
        {% if (curr_speed - min_speed) % speed_increment == 0 %}
            {% if verbose %}
                RESPOND MSG="Current speed: {(curr_speed / 60)|int} mm/s"
            {% endif %}

            ACCELEROMETER_MEASURE CHIP={accel_chip1}
            {% for key, factor in direction_factor[direction].move_factors|dictsort %}
                G1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}
            {% endfor %}
            ACCELEROMETER_MEASURE CHIP={accel_chip1} NAME=sp{(curr_speed / 60)|int}n1
            
          {% if accel_chip2 !="" %}
             ACCELEROMETER_MEASURE CHIP={accel_chip2}
            {% for key, factor in direction_factor[direction].move_factors|dictsort %}
                G1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}
            {% endfor %}
            ACCELEROMETER_MEASURE CHIP={accel_chip2} NAME=sp{(curr_speed / 60)|int}n1
          {% endif %}  

            G4 P300
            M400
        {% endif %}
    {% endfor %}

    {% if verbose %}
        RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    {% endif %}
    RUN_SHELL_COMMAND CMD=plot_graph PARAMS="VIBRATIONS {direction}"

    RESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION

[gcode_shell_command plot_graph]
command: bash /home/pi/printer_data/config/scripts/plot_graphs.sh
timeout: 300.0
verbose: True

[gcode_macro _MAX_FLOW_VARIABLES]
variable_start_flow: 0.0
variable_end_flow: 0.0
variable_test_length: 0.0
gcode:

[gcode_macro MAX_FLOW_CALIBRATION]
gcode:
    ## Get input parameters
    {% set extruder_temp = params.EXTRUDER_TEMP|default(245)|float %}
    {% set bed_temp = params.BED_TEMP|default(110)|float %}
    {% set start_flow = params.START_FLOW|default(4)|float %}  # min FLOW to test
    {% set end_flow = params.END_FLOW|default(30)|float %}     # max FLOW to test
    {% set width, test_length = (params.SIZE|default("70,70")).split(',')|map("trim")|map('float') %} # size of the test area "width,length"
    {% set e_w = params.EXTRUSION_WIDTH|default(0.45)|float %}  # extrusion width default for 0.4 nozzle
    {% set e_h = params.LAYER_HEIGHT|default(0.2)|float %}      # layer height
    {% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.93)|float %} # extrusion multiplier for the calibration
    {% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %} # filament diameter uses by math
    {% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}  # retraction length
    {% set feedrate_retract = params.RETRACT_SPEED|default(40)|float * 60 %} # retraction feedrate
    {% set purge_length = params.PURGE_MM|default(2) %}         # purge length

    {% set x_margin,y_margin = (params.RAFT_MARGIN|default("1,1")).split(",")|map("trim")|map("float") %} # margins of the raft in x and y
    {% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %} # raft feedrate
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate
    {% set accel  = params.MAX_ACCEL|default(printer.configfile.settings.printer.max_accel)|int %} # max accel limit to determine ability to start calibration
    {% set max_speed  = params.MAX_SPEED|default(printer.configfile.settings.printer.max_velocity)|int %} # max speed to determine ability to start calibration
    {% set feedrate_z = params.Z_SPEED|default(printer.configfile.settings.printer.max_z_velocity/2)|int * 60 %} # z feedrate 
    {% set x_center, y_center = (params.COORDS|default("0,0")).split(",")|map("trim")|map("float") %} # position of test on the buildplate
    
    ## Get printer config variables    
    {% set x_min = printer.configfile.config.stepper_x.position_min|default(0)|float + 20 %}
    {% set x_max = printer.configfile.config.stepper_x.position_max|float - 20 %}
    {% set y_min = printer.configfile.config.stepper_y.position_min|default(0)|float + 20 %}
    {% set y_max = printer.configfile.config.stepper_y.position_max|float - 20 %}
    
    ## Store parameters for COMPUTE_MAX_FLOW
    SET_GCODE_VARIABLE MACRO=_MAX_FLOW_VARIABLES VARIABLE=start_flow VALUE={start_flow}
    SET_GCODE_VARIABLE MACRO=_MAX_FLOW_VARIABLES VARIABLE=end_flow VALUE={end_flow}
    SET_GCODE_VARIABLE MACRO=_MAX_FLOW_VARIABLES VARIABLE=test_length VALUE={test_length}
    
    ## Compute variables
    {% set pi = 3.14159 %}
    {% set filament_area = pi*(filament_diameter/2)**2 %}
    {% set void_area_raft = ((e_w - e_h)*1.5)*(e_h*1.5) + pi * (e_h*0.75)**2  %}
    {% set spacing_raft = e_w*1.6 %}
    
    {% set void_area = (e_w - e_h)*e_h + pi * (e_h/2)**2 %}
    {% set spacing = e_w - e_h * (1 - (pi/4)) %}
    
    {% set top_speed = end_flow / void_area %}
    {% set max_accel_length = top_speed**2/accel %}
    {% set max_flow = void_area * max_speed|float %}
    {% set x_center = x_center if x_center > 0 else (x_max + x_min) / 2  %}
    {% set y_center = y_center if y_center > 0 else (y_max + y_min) / 2 %}
    {% set x_start = x_center - width / 2 %}
    {% set y_start = y_center - test_length / 2 %}
    {% set x_end = x_center + width / 2 %}
    {% set y_end = y_center + test_length / 2 %}

    ## Check availability of settings
    {% if max_speed > printer.configfile.settings.printer.max_velocity %}
        {action_raise_error("MAX_SPEED cannot be greater than printer settings ")}
    {% endif %}
    {% if accel > printer.configfile.settings.printer.max_accel %}
        {action_raise_error("MAX_ACCEL cannot be greater than printer settings ")}
    {% endif %}
    {% if max_flow < end_flow %}
        {action_raise_error("max_velocity limitation : You cannot reach %.1f mm^3/s with your settings" % max_flow
                        + " you should either increase EXTRUSION_WITH/EXTRUSION_HEIGHT or reduce END_FLOW")}
    {% endif %}
    {% if max_accel_length > width/2 - 10 %}
        {action_raise_error("max_accel limitation : Your settings does not allow to test max_flow "
                        + " you should either reduce END_FLOW or increase SIZE width")}
    {% endif %}
   
    
    ## Display usage
    {action_respond_info("\nStarting max_flow calibration print\n" +
                        "This operation can not be interrupted by normal means." + 
                        " Hit the \"emergency stop\" button or print \"M112\" in console to stop it if needed\n\n" +
                        "  Start flow : %.1f mm^3/s\n" % start_flow +
                        "  End flow : %.1f mm^3/s\n\n" % end_flow +
                        "When the printing pattern will be done, measure from the bottom to the first underextruded zone in mm." +
                        " Use a backlight can help to determine underextrusion zone.\n" +
                        " Then use COMPUTE_MAX_FLOW LENGTH=\<measure in mm\> to obtain the maximum flow value.\n")}

    {% if printer[printer.toolhead.extruder].can_extrude == True %}
        SAVE_GCODE_STATE ID=MAX_FLOW_CALIBRATION_STATE
        # apply max velocity if modified previously 
        SET_VELOCITY_LIMIT VELOCITY={max_speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
        _CALIBRATE_START EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp} 
        M221 S{e_multiplier*100} # apply extrusion multiplier
        M220 S100 # reset printer speed to 100%

        G92 E0 # reset extruder
        M83 # relative extrusion
        G90 # absolute coordinates
        G0 X{x_start - x_margin} Y{y_start - y_margin} F{feedrate_travel} # move to start point
        
        #
        ## Do Raft
        #
        G0 Z{1.5*e_h} F{feedrate_z}
        G0 E{purge_length} F{feedrate_raft/2} # initial purge spot
        
        G91 # relative coordinates
        {% for i in range(((width+x_margin*2)/spacing_raft)|int) %}
            G0 Y{ loop.cycle(test_length+y_margin*2,0-test_length-y_margin*2)} E{void_area_raft * (test_length + y_margin * 2 ) / filament_area} F{feedrate_raft}
            {% if not loop.last %}
                G0 X{spacing_raft} F{feedrate_travel}
            {% else %}
                G90
                G0 Y{y_start - y_margin} F{feedrate_travel}
                G91
            {% endif %}
        {% endfor %}
        G0 X-{width+x_margin*2} E{void_area_raft * (width + x_margin * 2 ) / filament_area} F{feedrate_raft} # bottom raft line
        G90 G90 # absolute coordinates
        G0 E-{retract_length} F{feedrate_retract} #retract
        G0 Z{2.5*e_h} F{feedrate_z}
    
        #
        ## Draw lines increasing velocity
        #
        {% set _last_flow = 0 %}
        {% for l in range((test_length/spacing)|int + 1)%}
            {% set test_flow = start_flow + l / ((test_length/spacing)|int)*(end_flow-start_flow) %}
            {% set test_speed = test_flow/void_area %}  #
            {% set test_width = 2*test_speed**2/accel + width - 2*max_accel_length %} # test width depends of acceleration
            {% set test_way=loop.cycle(1,-1) %} # motion way variable
            
            # Echo current test values
            
            M117 {"Flow %.1f mm^3/s" % test_flow}
            M118 {"Flow %.1f mm^3/s / Speed %.1f mm/s" % (test_flow,test_speed)}
              

            G0 X{x_center - (test_way*test_width/2)} Y{y_start+l*spacing} F{feedrate_travel} # go to start point of the line
            {% if loop.first %}
                  G0 E{retract_length} F{feedrate_retract} # unretract
            {% endif %}
            G0 X{x_center + (test_way*test_width/2)} E{void_area * test_width / filament_area} F{test_speed*60}  # print line 
        {% endfor %}
        
        M117 # clear display
        G0 E-{retract_length} F{feedrate_retract} # retract
        
        #
        ## Draw limits to evaluation zone
        #
        G0 Z{3.5*e_h} F{feedrate_z}
        G0 X{x_center - (width - 2*max_accel_length)/2 } F{feedrate_travel}
        G0 E{retract_length} F{feedrate_retract}
        G0 Y{y_start} E{void_area * test_length / filament_area} F{feedrate_raft}
        G0 E-{retract_length} F{feedrate_retract}
        G0 X{x_center + (width - 2*max_accel_length)/2 } F{feedrate_travel}
        G0 E{retract_length} F{feedrate_retract}
        G0 Y{y_end} E{void_area * test_length / filament_area} F{feedrate_raft}
        G0 E-{retract_length} F{feedrate_retract}

        # End elevation
        G0 Z{10} F{feedrate_z}
        _CALIBRATE_END
        RESTORE_GCODE_STATE ID=MAX_FLOW_CALIBRATION_STATE
    {% else %}
        {action_raise_error("%s temperature is under %s" % (printer.toolhead.extruder,printer.configfile.settings[printer.toolhead.extruder].min_extrude_temp)
                        + "/n MAX_FLOW_CALIBRATION cannot be done. Check your configuration.")}
    {% endif %}

[gcode_macro COMPUTE_MAX_FLOW]
gcode:
  {% set vars=printer['gcode_macro _MAX_FLOW_VARIABLES'] %}
  {% set measure = params.LENGTH|default(0)|float %}
  {% set start_flow = params.START_FLOW|default(vars.start_flow )|float %}
  {% set end_flow = params.END_FLOW|default(vars.end_flow )|float %}
  {% set test_length = params.TEST_LENGTH|default(vars.test_length)|float %}
  {% if measure > test_length %}
    {action_raise_error("Measure should be smaller than test %s" % vars.test_length)}
  {% endif %}
  {action_respond_info("Computed Max flow : %.2f mm^3/s" % (start_flow + (measure/test_length)*(end_flow - start_flow)))}
